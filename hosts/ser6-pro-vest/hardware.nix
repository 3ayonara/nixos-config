# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ 
      (modulesPath + "/installer/scan/not-detected.nix")
    ];


  boot = {
    # Use the systemd-boot EFI boot loader.
    loader.systemd-boot.enable = true;
    loader.efi.canTouchEfiVariables = true;

    # kernelPackages = pkgs.linuxPackages_latest;
    kernelPackages = pkgs.linuxPackages_xanmod_latest;

    initrd = {
      availableKernelModules = [ "nvme" "xhci_pci" "thunderbolt" "usbhid" "usb_storage" "sd_mod" ];
      kernelModules = [ ];
      luks.devices."nixos".device = "/dev/disk/by-uuid/59727ffa-c2ee-4666-8a4f-6a8bc0ed8a33";
    };

    kernelModules = [ "kvm-amd" ];
    extraModulePackages = [ ];
    supportedFilesystems = [ "btrfs" ];
  };

  fileSystems = {
    "/" =
      {
        device = "/dev/disk/by-uuid/5c841a08-7662-4bc8-9a33-53e06b075572";
        fsType = "btrfs";
        options = [ "noatime,space_cache=v2,compress=zstd,ssd,discard=async,subvol=@" ];
      };

    "/home" =
      {
        device = "/dev/disk/by-uuid/5c841a08-7662-4bc8-9a33-53e06b075572";
        fsType = "btrfs";
        options = [ "noatime,space_cache=v2,compress=zstd,ssd,discard=async,subvol=@home" ];
      };

    "/nix" =
      {
        device = "/dev/disk/by-uuid/5c841a08-7662-4bc8-9a33-53e06b075572";
        fsType = "btrfs";
        options = [ "noatime,space_cache=v2,compress=zstd,ssd,discard=async,subvol=@nix" ];
      };

    "/snapshots" =
      {
        device = "/dev/disk/by-uuid/5c841a08-7662-4bc8-9a33-53e06b075572";
        fsType = "btrfs";
        options = [ "noatime,space_cache=v2,compress=zstd,ssd,discard=async,subvol=@snapshots" ];
      };

    "/boot" =
      {
        device = "/dev/disk/by-uuid/6D57-5AF6";
        fsType = "vfat";
      };
  };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
